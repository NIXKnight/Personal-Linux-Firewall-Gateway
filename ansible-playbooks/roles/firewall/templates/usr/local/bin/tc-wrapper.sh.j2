#!/bin/bash

function apply_tc_rules {
# Egress shaping for WAN
  tc qdisc replace dev {{ FIREWALL_WAN_INTERFACE }} root handle 1: cake besteffort bandwidth {{ FIREWALL_WAN_BANDWIDTH }} ethernet dual-srchost

  # Ingress shaping for WAN using IFB
  modprobe ifb
  ip link add ifb0 type ifb
  ip link set ifb0 up

  tc qdisc add dev {{ FIREWALL_WAN_INTERFACE }} handle ffff: ingress
  tc filter add dev {{ FIREWALL_WAN_INTERFACE }} parent ffff: protocol all u32 match u32 0 0 action mirred egress redirect dev ifb0
  tc qdisc replace dev ifb0 root cake besteffort bandwidth {{ FIREWALL_WAN_BANDWIDTH }} ethernet dual-dsthost

  # Egress shaping for LAN
  tc qdisc replace dev {{ FIREWALL_LAN_INTERFACE }} root handle 1: cake besteffort bandwidth {{ FIREWALL_LAN_BANDWIDTH }} ethernet dual-dsthost
}

function flush_tc_rules {
  tc qdisc del dev {{ FIREWALL_WAN_INTERFACE }} root 2>/dev/null
  tc qdisc del dev {{ FIREWALL_WAN_INTERFACE }} ingress 2>/dev/null
  tc qdisc del dev ifb0 root 2>/dev/null
  tc qdisc del dev {{ FIREWALL_LAN_INTERFACE }} root 2>/dev/null
  ip link delete ifb0 type ifb 2>/dev/null
}

# Parse command-line options
OPTIONS=$(getopt --long start,stop,restart -- "$@")

eval set -- "$OPTIONS"

while true; do
  case "$1" in
    --start)
      echo "Applying traffic control rules..."
      apply_tc_rules
      echo "Applied traffic control rules."
      exit 0
      ;;
    --stop)
      echo "Flushing traffic control rules..."
      flush_tc_rules
      echo "Flushed traffic control rules."
      exit 0
      ;;
    --reload)
      echo "Flushing traffic control rules..."
      flush_tc_rules
      echo "Flushed traffic control rules."
      echo "Applying traffic control rules..."
      apply_tc_rules
      echo "Applied traffic control rules."
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Invalid option"
      exit 1
      ;;
  esac
  shift
done
