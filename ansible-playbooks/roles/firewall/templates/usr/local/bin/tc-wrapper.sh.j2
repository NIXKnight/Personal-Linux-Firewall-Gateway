#!/bin/bash

function flush_tc_rules {
  # Delete existing qdiscs
  /usr/sbin/tc qdisc del dev {{ FIREWALL_WAN_INTERFACE }} root 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "$(date): Failed to delete qdisc on {{ FIREWALL_WAN_INTERFACE }}"
    exit 1
  fi

  /usr/sbin/tc qdisc del dev {{ FIREWALL_LAN_INTERFACE }} root 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "$(date): Failed to delete qdisc on {{ FIREWALL_LAN_INTERFACE }}"
    exit 1
  fi
}

function apply_tc_rules {
  flush_tc_rules

  # Add new qdiscs
  /usr/sbin/tc qdisc add dev {{ FIREWALL_WAN_INTERFACE }} handle 1: root cake besteffort bandwidth {{ WAN_UPLOAD_BANDWIDTH }} internet nat egress ack-filter dual-srchost ethernet
  if [ $? -eq 0 ]; then
    echo "$(date): Successfully added qdisc on {{ FIREWALL_WAN_INTERFACE }}"
  else
    echo "$(date): Failed to add qdisc on {{ FIREWALL_WAN_INTERFACE }}"
    exit 1
  fi

  /usr/sbin/tc qdisc add dev {{ FIREWALL_LAN_INTERFACE }} handle 1: root cake besteffort bandwidth {{ WAN_DOWNLOAD_BANDWIDTH }} internet ingress dual-dsthost ethernet
  if [ $? -eq 0 ]; then
    echo "$(date): Successfully added qdisc on {{ FIREWALL_LAN_INTERFACE }}"
  else
    echo "$(date): Failed to add qdisc on {{ FIREWALL_LAN_INTERFACE }}"
    exit 1
  fi
}

# Parse command-line options
OPTIONS=$(getopt --long start,stop,restart -- "$@")

eval set -- "$OPTIONS"

while true; do
  case "$1" in
    --start)
      echo "Applying traffic control rules..."
      apply_tc_rules
      echo "Applied traffic control rules."
      exit 0
      ;;
    --stop)
      echo "Flushing traffic control rules..."
      flush_tc_rules
      echo "Flushed traffic control rules."
      exit 0
      ;;
    --reload)
      echo "Applying traffic control rules..."
      apply_tc_rules
      echo "Applied traffic control rules."
      exit 0
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Invalid option"
      exit 1
      ;;
  esac
  shift
done
