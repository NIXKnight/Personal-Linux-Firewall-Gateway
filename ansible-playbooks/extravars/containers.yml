# ntopng
NTOP_CONFIG:
  DEPENDENCIES:
    - "{{ REDIS_SERVICE_NAME }}"
    - "{{ INFLUXDB_SERVICE_NAME }}"
  KUBE_FILE: "{{ NTOPNG_SERVICE_NAME }}.yaml"
  VOLUMES: [ "{{ NTOPNG_SERVICE_NAME }}" ]
  CONFIGMAPS:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ NTOPNG_SERVICE_NAME }}"
      data:
        config: "--community --dns-mode 1 --interface {{ FIREWALL_WAN_INTERFACE }} --interface {{ FIREWALL_LAN_INTERFACE }}"
  PODS:
    - apiVersion: v1
      kind: Pod
      metadata:
        name: "{{ NTOPNG_SERVICE_NAME }}"
      spec:
        hostNetwork: true
        volumes:
          - name: "{{ NTOPNG_SERVICE_NAME }}"
            persistentVolumeClaim:
              claimName: "{{ NTOPNG_SERVICE_NAME }}"
        containers:
          - name: server
            image: docker.io/nixknight/ntopng:latest
            env:
              - name: NTOP_CONFIG
                valueFrom:
                  configMapKeyRef: { name: "{{ NTOPNG_SERVICE_NAME }}", key: config }
            volumeMounts:
              - mountPath: "/var/lib/ntopng"
                name: "{{ NTOPNG_SERVICE_NAME }}"
            securityContext:
              privileged: true
              allowPrivilegeEscalation: true

# redis
REDIS_CONFIG:
  KUBE_FILE: "{{ REDIS_SERVICE_NAME }}.yaml"
  VOLUMES: [ "{{ REDIS_SERVICE_NAME }}" ]
  PODS:
    - apiVersion: v1
      kind: Pod
      metadata:
        name: "{{ REDIS_SERVICE_NAME }}"
      spec:
        hostNetwork: true
        volumes:
          - name: "{{ REDIS_SERVICE_NAME }}"
            persistentVolumeClaim:
              claimName: "{{ REDIS_SERVICE_NAME }}"
        containers:
          - name: server
            image: docker.io/library/redis:7.0.11-alpine3.18
            volumeMounts:
              - mountPath: "/data"
                name: "{{ REDIS_SERVICE_NAME }}"

# influxdb 1.x because NTOPNG people haven't made any decisions on weather to use InfluxDB 2.x or not since the past 3 years.
# https://github.com/ntop/ntopng/issues/3764
INFLUXDB_CONFIG:
  KUBE_FILE: "{{ INFLUXDB_SERVICE_NAME }}.yaml"
  VOLUMES: [ "{{ INFLUXDB_SERVICE_NAME }}" ]
  CONFIGMAPS:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ INFLUXDB_SERVICE_NAME }}"
      data:
        INFLUXDB_DB: "dummy"
        INFLUXDB_USER: "dummy"
        INFLUXDB_USER_PASSWORD: "dummy"
        INFLUXDB_HTTP_AUTH_ENABLED: "{{ INFLUXDB_HTTP_AUTH_ENABLED }}"
        INFLUXDB_HTTP_LOG_ENABLED: "{{ INFLUXDB_HTTP_LOG_ENABLED }}"
        INFLUXDB_CONTINUOUS_QUERIES_LOG_ENABLED: "{{ INFLUXDB_CONTINUOUS_QUERIES_LOG_ENABLED }}"
        INFLUXDB_DATA_QUERY_LOG_ENABLED: "{{ INFLUXDB_DATA_QUERY_LOG_ENABLED }}"
        INFLUXDB_HTTP_BIND_ADDRESS: "{{ INFLUXDB_HTTP_BIND_ADDRESS }}"
  SECRETS:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ INFLUXDB_SERVICE_NAME }}"
      stringData:
        INFLUXDB_ADMIN_USER: "{{ INFLUXDB_ADMIN_USER }}"
        INFLUXDB_ADMIN_PASSWORD: "{{ INFLUXDB_ADMIN_PASSWORD }}"
  PODS:
    - apiVersion: v1
      kind: Pod
      metadata:
        name: "{{ INFLUXDB_SERVICE_NAME }}"
      spec:
        hostNetwork: true
        volumes:
          - name: "{{ INFLUXDB_SERVICE_NAME }}"
            persistentVolumeClaim:
              claimName: "{{ INFLUXDB_SERVICE_NAME }}"
        containers:
          - name: "server"
            image: docker.io/library/influxdb:1.8.10
            envFrom:
              - configMapRef: { name: "{{ INFLUXDB_SERVICE_NAME }}" }
              - secretRef: { name: "{{ INFLUXDB_SERVICE_NAME }}" }
            volumeMounts:
              - mountPath: "/var/lib/influxdb"
                name: "{{ INFLUXDB_SERVICE_NAME }}"

# grafana
GRAFANA_CONFIG:
  DEPENDENCIES:
    - "{{ INFLUXDB_SERVICE_NAME }}"
  KUBE_FILE: "{{ GRAFANA_SERVICE_NAME }}.yaml"
  VOLUMES: [ "{{ GRAFANA_SERVICE_NAME }}" ]
  CONFIGMAPS:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ GRAFANA_SERVICE_NAME }}"
      data:
        TZ: "Asia/Karachi"
        GF_DEFAULT_INSTANCE_NAME: "{{ GRAFANA_INSTANCE_NAME }}"
        GF_SERVER_HTTP_ADDR: "{{ GRAFANA_HTTP_ADDR }}"
        GF_SERVER_HTTP_PORT: "{{ GRAFANA_HTTP_PORT }}"
        GF_SERVER_ENFORCE_DOMAIN: "{{ GRAFANA_ROOT_URL }}"
        GF_SERVER_ROUTER_LOGGING: False
        GF_SERVER_ENABLE_GZIP: False
        GF_SMTP_ENABLED: True
        GF_SMTP_FROM_ADDRESS: "{{ GRAFANA_SMTP_FROM_ADDRESS }}"
        GF_SMTP_FROM_NAME: "{{ GRAFANA_SMTP_FROM_NAME }}"
        GF_INSTALL_PLUGINS: "{{ GRAFANA_PLUGINS }}"
  SECRETS:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ GRAFANA_SERVICE_NAME }}"
      stringData:
        GF_SECURITY_ADMIN_USER: "{{ GRAFANA_ADMIN_USER }}"
        GF_SECURITY_ADMIN_PASSWORD: "{{ GRAFANA_ADMIN_PASSWORD }}"
        GF_SMTP_HOST: "{{ GRAFANA_SMTP_HOST }}"
        GF_SMTP_USER: "{{ GRAFANA_SMTP_USER }}"
        GF_SMTP_PASSWORD: "{{ GRAFANA_SMTP_PASSWORD }}"
  PODS:
    - apiVersion: v1
      kind: Pod
      metadata:
        name: "{{ GRAFANA_SERVICE_NAME }}"
      spec:
        hostNetwork: true
        volumes:
          - name: "{{ GRAFANA_SERVICE_NAME }}"
            persistentVolumeClaim:
              claimName: "{{ GRAFANA_SERVICE_NAME }}"
        containers:
          - name: server
            image: docker.io/grafana/grafana-oss:10.1.1
            envFrom:
              - configMapRef: { name: "{{ GRAFANA_SERVICE_NAME }}" }
              - secretRef: { name: "{{ GRAFANA_SERVICE_NAME }}" }
            volumeMounts:
              - mountPath: "/var/lib/grafana"
                name: "{{ GRAFANA_SERVICE_NAME }}"

# mariadb
MARIADB_CONFIG:
  KUBE_FILE: "{{ MARIADB_SERVICE_NAME }}.yaml"
  VOLUMES: [ "{{ MARIADB_SERVICE_NAME }}" ]
  SECRETS:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ MARIADB_SERVICE_NAME }}"
      stringData:
        MYSQL_ROOT_PASSWORD: "{{ MARIADB_ROOT_PASSWORD }}"
  PODS:
    - apiVersion: v1
      kind: Pod
      metadata:
        name: "{{ MARIADB_SERVICE_NAME }}"
      spec:
        hostNetwork: true
        volumes:
          - name: "{{ MARIADB_SERVICE_NAME }}"
            persistentVolumeClaim:
              claimName: "{{ MARIADB_SERVICE_NAME }}"
        containers:
          - name: server
            image: docker.io/library/mariadb:10.11.5-jammy
            envFrom:
              - secretRef: { name: mariadb }
            volumeMounts:
              - mountPath: "/var/lib/mysql"
                name: "{{ MARIADB_SERVICE_NAME }}"

# powerdns
POWERDNS_CONFIG:
  DEPENDENCIES:
    - "{{ MARIADB_SERVICE_NAME }}"
  KUBE_FILE: "{{ POWERDNS_SERVICE_NAME }}.yaml"
  CONFIGMAPS:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: pdns-server
      data:
        PDNS_MYSQL_HOST: "{{ PDNS_MYSQL_HOST }}"
        PDNS_MYSQL_USERNAME: "{{ PDNS_MYSQL_USERNAME }}"
        PDNS_MYSQL_DATABASE: "{{ PDNS_MYSQL_DATABASE }}"
        PDNS_API_ADDRESS: "{{ PDNS_API_ADDRESS }}"
        PDNS_LOCAL_PORT: "{{ PDNS_LOCAL_PORT }}"
        PDNS_API_ADDRESS: "{{ PDNS_API_ADDRESS }}"
        PDNS_API_PORT: "{{ PDNS_API_PORT }}"
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: pdns-recursor
      data:
        PDNS_RECURSOR_LOCAL_DNS_ADDRESS: "{{ PDNS_RECURSOR_LOCAL_DNS_ADDRESS }}"
        PDNS_RECURSOR_LOCAL_DNS_PORT: "{{ PDNS_RECURSOR_LOCAL_DNS_PORT }}"
        PDNS_RECURSOR_UPSTREAM_RESOLVERS: "{{ PDNS_RECURSOR_UPSTREAM_RESOLVERS }}"
        PDNS_RECURSOR_LOCAL_ZONE: "{{ PDNS_RECURSOR_LOCAL_ZONE }}"
  SECRETS:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: pdns-server
      stringData:
        PDNS_MYSQL_PASSWORD: "{{ PDNS_MYSQL_PASSWORD }}"
        PDNS_API_KEY: "{{ PDNS_API_KEY }}"
    - apiVersion: v1
      kind: Secret
      metadata:
        name: pdns-recursor
      stringData:
        PDNS_RECURSOR_API_KEY: "{{ PDNS_RECURSOR_API_KEY }}"
  PODS:
    - apiVersion: v1
      kind: Pod
      metadata:
        name: "{{ POWERDNS_SERVICE_NAME }}"
      spec:
        hostNetwork: true
        securityContext:
          capabilities:
            add: ["NET_BIND_SERVICE", "CHOWN"]
        containers:
          - name: server
            image: docker.io/nixknight/powerdns:latest
            command: [ "/usr/local/bin/pdns.sh" ]
            args: [ "--pdns" ]
            envFrom:
              - configMapRef: { name: pdns-server }
              - secretRef: { name: pdns-server }
            securityContext:
              capabilities:
                add: ["NET_BIND_SERVICE", "CHOWN"]
          - name: recursor
            image: docker.io/nixknight/powerdns:latest
            command: [ "/usr/local/bin/pdns.sh" ]
            args: [ "--recursor" ]
            envFrom:
              - configMapRef: { name: pdns-recursor }
              - secretRef: { name: pdns-recursor }
            securityContext:
              capabilities:
                add: ["NET_BIND_SERVICE", "CHOWN"]

# kea
KEA_CONFIG:
  DEPENDENCIES:
    - "{{ MARIADB_SERVICE_NAME }}"
    - "{{ POWERDNS_SERVICE_NAME }}"
  KUBE_FILE: "{{ KEA_SERVICE_NAME }}.yaml"
  VOLUMES: [ "kea_dhcp_server" ]
  CONFIGMAPS:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: kea-server-env
      data:
        KEA_LOCKFILE_DIR: "/usr/local/var/run/kea/kea-dhcp4-server"
        PDNS_API_PROTOCOL: "http"
        PDNS_DOMAIN: "{{ PDNS_RECURSOR_LOCAL_ZONE }}"
        PDNS_API_HOST: 127.0.0.1
        PDNS_API_PORT: 8081
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: kea-ctrl-agent-env
      data:
        KEA_LOCKFILE_DIR: "/usr/local/var/run/kea/kea-ctrl-agent"
  SECRETS:
    - apiVersion: v1
      kind: Secret
      metadata:
        name: kea-server-env
      stringData:
        PDNS_API_KEY: "{{ PDNS_API_KEY }}"
        KEA_MYSQL_HOST: "{{ KEA_MYSQL_HOST }}"
        KEA_MYSQL_DATABASE: "{{ KEA_MYSQL_DATABASE }}"
        KEA_MYSQL_USERNAME: "{{ KEA_MYSQL_USERNAME }}"
        KEA_MYSQL_PASSWORD: "{{ KEA_MYSQL_PASSWORD }}"
    - apiVersion: v1
      kind: Secret
      metadata:
        name: kea-config
      stringData:
        kea-dhcp.json: |
          {{ KEA_SERVER_CONFIG | to_json }}
        kea-ctrl-agent.json: |
          {{ KEA_CTRL_AGENT_CONFIG | to_json }}
  PODS:
    - apiVersion: v1
      kind: Pod
      metadata:
        name: "{{ KEA_SERVICE_NAME }}"
      spec:
        hostNetwork: true
        securityContext:
          capabilities:
            add: ["NET_RAW", "NET_BIND_SERVICE"]
        volumes:
          - name: kea-config
            secret:
              secretName: kea-config
          - name: kea-dhcp-server
            persistentVolumeClaim:
              claimName: kea_dhcp_server
        initContainers:
          - name: db-init
            image: docker.io/nixknight/kea:latest
            command: [ "/usr/local/bin/init.sh" ]
            envFrom:
              - configMapRef: { name: kea-server-env }
              - secretRef: { name: kea-server-env }
            volumeMounts:
              - mountPath: /usr/local/etc/kea/kea-dhcp.json
                subPath: kea-dhcp.json
                name: kea-config
        containers:
          - name: dhcp-server
            image: docker.io/nixknight/kea:latest
            command: [ "/usr/local/sbin/kea-dhcp4" ]
            args: [ "-c", "/usr/local/etc/kea/kea-dhcp.json" ]
            envFrom:
              - configMapRef: { name: kea-server-env }
              - secretRef: { name: kea-server-env }
            securityContext:
              privileged: true
              runAsUser: 101
              runAsGroup: 101
              capabilities:
                add: ["NET_RAW", "NET_BIND_SERVICE"]
            volumeMounts:
              - mountPath: /usr/local/etc/kea/kea-dhcp.json
                subPath: kea-dhcp.json
                name: kea-config
              - mountPath: /usr/local/var/run/kea/kea-dhcp4-server
                name: kea-dhcp-server
          - name: ctrl-agent
            image: docker.io/nixknight/kea:latest
            command: [ "/usr/local/sbin/kea-ctrl-agent" ]
            args: [ "-c", "/usr/local/etc/kea/kea-ctrl-agent.json" ]
            envFrom:
              - configMapRef: { name: kea-ctrl-agent-env }
            securityContext:
              runAsUser: 101
              runAsGroup: 101
              capabilities:
                add: ["NET_BIND_SERVICE"]
            volumeMounts:
              - mountPath: /usr/local/etc/kea/kea-ctrl-agent.json
                subPath: kea-ctrl-agent.json
                name: kea-config
              - mountPath: /usr/local/var/run/kea/kea-dhcp4-server
                name: kea-dhcp-server

# omada
OMADA_CONFIG:
  KUBE_FILE: "{{ OMADA_SERVICE_NAME }}.yaml"
  VOLUMES: [ "omada_data", "omada_logs" ]
  CONFIGMAPS:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ OMADA_SERVICE_NAME }}"
      data:
        MANAGE_HTTP_PORT: 8089
        MANAGE_HTTPS_PORT: 8043
        PORTAL_HTTP_PORT: 8089
        PORTAL_HTTPS_PORT: 8843
        PORT_APP_DISCOVERY: 27001
        PORT_ADOPT_V1: 29812
        PORT_UPGRADE_V1: 29813
        PORT_MANAGER_V1: 29811
        PORT_MANAGER_V2: 29814
        PORT_DISCOVERY: 29810
        PORT_TRANSFER_V2: 29815
        PORT_RTTY: 29816
        SHOW_SERVER_LOGS: true
        SHOW_MONGODB_LOGS: false
        TZ: Asia/Karachi
  PODS:
    - apiVersion: v1
      kind: Pod
      metadata:
        name: "{{ OMADA_SERVICE_NAME }}"
      spec:
        hostNetwork: true
        terminationGracePeriodSeconds: 120
        volumes:
          - name: omada_data
            persistentVolumeClaim:
              claimName: omada_data
          - name: omada_logs
            persistentVolumeClaim:
              claimName: omada_logs
        containers:
          - name: controller
            image: docker.io/mbentley/omada-controller:5.12
            args:
              - "/usr/bin/java"
              - "-Djava.net.preferIPv4Stack=true"
              - "-server"
              - "-Xms128m"
              - "-Xmx2048m"
              - "-XX:MaxHeapFreeRatio=60"
              - "-XX:MinHeapFreeRatio=30"
              - "-XX:+HeapDumpOnOutOfMemoryError"
              - "-XX:HeapDumpPath=/opt/tplink/EAPController/logs/java_heapdump.hprof"
              - "-Djava.awt.headless=true"
              - "-cp"
              - "/opt/tplink/EAPController/lib/*::/opt/tplink/EAPController/properties:"
              - "com.tplink.smb.omada.starter.OmadaLinuxMain"
            envFrom:
              - configMapRef: { name: omada }
            volumeMounts:
              - mountPath: /opt/tplink/EAPController/data
                name: omada_data
              - mountPath: /opt/tplink/EAPController/logs
                name: omada_logs

# nginx
NGINX_CONFIG:
  DEPENDENCIES:
    - "{{ GRAFANA_SERVICE_NAME }}"
    - "{{ OMADA_SERVICE_NAME }}"
  KUBE_FILE: "{{ NGINX_SERVICE_NAME }}.yaml"
  CONFIGMAPS:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ NGINX_SERVICE_NAME }}"
      data:
        nginx_config.conf: |
          # NGINX HTTP Core Module Parameters
          tcp_nopush on;
          tcp_nodelay on;
          types_hash_max_size 2048;
          server_names_hash_bucket_size 64;
          server_tokens off;

          # NGINX Auto Index Module Parameters
          autoindex off;

          # NGINX HTTP Headers Module Parameters
          add_header X-Frame-Options SAMEORIGIN;
          add_header X-Content-Type-Options nosniff;
          add_header X-XSS-Protection "1; mode=block";

          # NGINX HTTP SSL Module Parameters
          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_session_cache shared:SSL:10m;
          ssl_session_timeout 10m;
          ssl_prefer_server_ciphers on;
          ssl_certificate /etc/LetsEncrypt/{{ ACME_DOMAIN_NAME }}/{{ ACME_DOMAIN_NAME }}-fullchain.crt;
          ssl_certificate_key /etc/LetsEncrypt/{{ ACME_DOMAIN_NAME }}/{{ ACME_DOMAIN_NAME }}.key;
          ssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384';
        grafana.conf: |
          map $http_upgrade $connection_upgrade {
            default upgrade;
            '' close;
          }

          upstream grafana {
            server {{ GRAFANA_HTTP_ADDR }}:{{ GRAFANA_HTTP_PORT }};
          }

          server {
            listen 443 ssl;
            server_name {{ GRAFANA_DOMAIN }};

            location / {
              proxy_set_header Host $http_host;
              proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
              proxy_pass http://grafana;
            }

            location /api/live/ {
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection $connection_upgrade;
              proxy_set_header Host $http_host;
              proxy_pass http://grafana;
            }
          }
        omada.conf: |
          server {
            listen 80;
            server_name {{ OMADA_DOMAIN }};

            return 301 https://{{ OMADA_DOMAIN }};
          }

          server {
            listen 443 ssl;
            server_name {{ OMADA_DOMAIN }};

            ignore_invalid_headers off;
            client_max_body_size 0;

            set $backend https://127.0.0.1:8043;

            location / {
                expires                 off;
                proxy_http_version      1.1;
                proxy_set_header        Host $http_host:8043;
                proxy_pass              $backend;

                proxy_redirect ~https://(.+):8043/(.+)/login$ https://$http_host/$2/login;
                proxy_buffering off;

                proxy_set_header        X-Real-IP                 $remote_addr;
                proxy_set_header        X-Forwarded-For           $proxy_add_x_forwarded_for;
                proxy_set_header        Cookie                    $http_cookie;
                proxy_set_header	      X-Forwarded-Proto         $scheme;

                proxy_set_header        Upgrade                   $http_upgrade;
                proxy_set_header        Connection                "upgrade";
            }
          }
  PODS:
    - apiVersion: v1
      kind: Pod
      metadata:
        name: "{{ NGINX_SERVICE_NAME }}"
      spec:
        hostNetwork: true
        volumes:
          - name: "{{ NGINX_SERVICE_NAME }}"
            ConfigMap:
              name: "{{ NGINX_SERVICE_NAME }}"
          - name: certs
            hostPath:
              path: /etc/LetsEncrypt
              type: Directory
        containers:
          - name: web-server
            image: docker.io/library/nginx:1.25.2-bookworm
            volumeMounts:
              - mountPath: "/etc/nginx/conf.d"
                name: "{{ NGINX_SERVICE_NAME }}"
              - mountPath: "/etc/LetsEncrypt"
                name: certs
